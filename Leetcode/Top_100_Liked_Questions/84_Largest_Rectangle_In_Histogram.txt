class Solution {
    public int largestRectangleArea(int[] heights) {
        
        int[] lb = new int[heights.length];
        Stack<Integer> st = new Stack<>();
        st.push(0);
        lb[0] = -1; 
        for(int i = 1; i < heights.length; i++){
            while(!st.isEmpty() && heights[st.peek()] >= heights[i]){
                st.pop();
            }
            if(st.isEmpty()){
                lb[i] = -1;
            }
            else{
                lb[i] = st.peek();
            }
            st.push(i);
        }
        int[] rb = new int[heights.length];
        st = new Stack<>();
        st.push(heights.length-1);
        rb[heights.length-1] = heights.length;
        for(int i = heights.length-2; i >= 0; i--){
            while(!st.isEmpty() && heights[st.peek()] >= heights[i]){
                st.pop();
            }
            if(st.isEmpty()){
                rb[i] = heights.length;
            }
            else{
                rb[i] = st.peek();
            }
            st.push(i);
        }
        
        int maxArea = 0;
        for(int i = 0; i < heights.length; i++){
            maxArea = Math.max(maxArea, (rb[i] - lb[i] - 1)*heights[i]);
        }
        return maxArea;
    }
}
//https://www.youtube.com/watch?v=0do2734xhnU