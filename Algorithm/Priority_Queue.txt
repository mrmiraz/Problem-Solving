public class PriorityQueue2 {
    public int getLeftChild(ArrayList<Integer> array, int index){
        if((2*index+1)< array.size() && index >= 0 ){
            return 2*index+1;
        }
        return -1;
    }
    public int getRightChild(ArrayList<Integer> array, int index){
        if((2*index+2)< array.size() && index >= 0 ){
            return 2*index+2;
        }
        return -1;
    }
    
    public void minHeapify(ArrayList<Integer> array, int index){
        int leftChildIndex = getLeftChild(array, index);
        int rightChildIndex = getRightChild(array, index);
        int minValueIndex = index;
        if(leftChildIndex < array.size() && leftChildIndex > 0){
            if(array.get(leftChildIndex) < array.get(minValueIndex)){
                minValueIndex = leftChildIndex;
            }
            else if(rightChildIndex < array.size() && rightChildIndex > 0){
                if(array.get(rightChildIndex) < array.get(minValueIndex)){
                    minValueIndex = rightChildIndex;
                }
            }
        }
        
        if(minValueIndex != index){
            swap(array, minValueIndex, index);
            minHeapify(array, minValueIndex);
        }
    }
    public void insert(ArrayList<Integer> array, int newNum){
        if(array.size() == 0){
            array.add(newNum);
        }
        else{
            array.add(newNum);
            int currentIndex = array.size() -1;
            int parentIndex = (currentIndex-1)/2;
            int parent = array.get(parentIndex);
            int child = newNum;
            int childIndex = array.size() - 1; 
            while(parent > child){
                swap(array, parentIndex, childIndex);
                childIndex = parentIndex;
                parentIndex = (childIndex - 1)/2;
                parent = array.get(parentIndex);
                child = array.get(childIndex);
            }
        }
    }
    public void delete(ArrayList<Integer> array){

        if(array.size() == 0){
            System.out.println("The Queue is Empty!");
        }
        else{
            swap(array, 0, array.size()-1);
            array.remove(array.size()-1);
            minHeapify(array, 0);
        }
    }
    public void swap(ArrayList<Integer> array, int index1, int index2){
        int temp = array.get(index1);
        array.set(index1, array.get(index2));
        array.set(index2, temp);
        
    }
    public static void printHeap(ArrayList<Integer> array){
        System.out.print("\n");
        for(int i = 0; i < array.size(); i++){
            System.out.print(array.get(i)+",");
        }
    }
}